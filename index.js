const fs = require('fs');
const isc = require('ip-subnet-calculator');

const CIDR_PATH = './cn-aggregated.zone.txt';
const PAC_PATH = './whitelist.pac';
const PROXY = '127.0.0.1:1080';

const CIDRsFileContent = fs.readFileSync(CIDR_PATH);
const CIDRs = CIDRsFileContent.toString().split(/\n|\r\n/);

var ips = '';

const addIp = (ipFormat, ipMask) => ips += `  ['${ipFormat}', '${ipMask}'], \n`;

addIp('127.0.0.1', '255.255.255.255');
addIp('10.0.0.0', '255.0.0.0');
addIp('192.168.0.0', '255.255.255.0');
addIp('172.16.0.0', '255.239.0.0');

CIDRs.forEach(CIDR => {
  if (CIDR) {
    const ipFormat = CIDR.split('/')[0];
    const ipPrefixSize = CIDR.split('/')[1];
    const ipMask = isc.calculateSubnetMask(ipFormat,ipPrefixSize).prefixMaskStr;

    addIp(ipFormat, ipMask);
  }
})

var pacContent = `
/**
 * This PAC was generated by CIDR2PAC.
 * Last updated at ${new Date().toUTCString()}
 * More informations: https://github.com/wspl/CIDR2PAC
 */

var ipRange = [
${ips}
];

function isInside (host) {
  for (var i = 0; i < ipRange.length; i += 1) {
    if (isInNet(dnsResolve(host), ipRange[i][0], ipRange[i][1])) {
      return true;
    }
  }
  return false;
}

function FindProxyForURL (url, host) {
  if (isInside(host)) {
    return 'DIRECT';
  } else {
    return 'PROXY ${PROXY}';
  }
}
`;

fs.writeFileSync(PAC_PATH, pacContent);

console.log('All done!');
