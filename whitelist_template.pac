
/**
 * This PAC was generated by CIDR2PAC ver.0.2.0
 * Last updated at {#date}
 * More informations: https://github.com/wspl/CIDR2PAC
 */

var ipRepo = [{#ipRepo}];

function ipToLong(ip) {
  var ipl = 0;
  var ipParts = ip.split('.');
  for (var i = 0; i < ipParts.length; i += 1) {
    ipl <<= 8;
    ipl += parseInt(ipParts[i]);
  }
  return ipl >>> 0;
}

function isInside(host) {
  var testIpLong = ipToLong(dnsResolve(host));
  alert(dnsResolve(host));
  
  var leftIndex = parseInt(ipRepo.length / 2);
  var rightIndex = leftIndex + 1;
  var leftLong = ipRepo[leftIndex][1];
  var rightLong = ipRepo[rightIndex][0];

  while (1) {
    if (testIpLong < leftLong) {
      leftIndex = parseInt(leftIndex / 2);
      rightIndex = leftIndex + 1;
      leftLong = ipRepo[leftIndex][1];
      rightLong = ipRepo[rightIndex][0];

      var leftMin = ipRepo[leftIndex][0];
      if (testIpLong > leftMin) {
        return true;
      }
    } else if (testIpLong > rightLong) {
      leftIndex = leftIndex + parseInt(leftIndex / 2);
      rightIndex = leftIndex + 1;
      leftLong = ipRepo[leftIndex][1];
      rightLong = ipRepo[rightIndex][0];
      
      var rightMax = ipRepo[rightIndex][1];
      if (testIpLong < rightMax) {
        return true;
      }
    } else {
      return false
    }
  }
}

function FindProxyForURL(url, host) {
  if (isInside(host)) {
    return 'DIRECT';
  } else {
    return 'PROXY 127.0.0.1:1080';
  }
}
